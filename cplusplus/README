Open Diameter: Open-source software for the Diameter 
               and Diameter related protocols

Copyright (C) 2002-2006 Open Diameter Project

Plese read the accompanying COPYING file for the terms and conditions
of the licences applied to this software.


Table of Contents
-----------------

1. Required external libraries and tools
    1.1 GNU g++ versions
    1.2 Xerces C++ XML Parser
    1.3 ACE library 
    1.4 BOOST library 
    1.5 OpenSSL library
    1.6 Autoconf/Automake/libtool versions
2. How to compile
    2.1 Open diameter libraries
    2.2 Open diameter applications
    2.3 Supported platforms
    2.4 Build environment
    2.5 Win32 Platforms
3. Installation
4. How to use
    4.1 General Diameter Parser Library Notes
    4.2 General Diameter Library Notes
    4.3 Sample programs 
    4.4 Parser Usage Notes for String Container
    4.5 Directory changes for 1.0.7
4. Platform Support Table
5. Contact Information



1. Required external libraries and tools
----------------------------------------

1.1 GNU g++ versions

    We have successfully compiled the Open Diameter libraries 
    with the following g++ versions:

    3.2.1 and above (latest is 3.4.x)

    Note that when using a particular version of g++, it is 
    recommended that the ACE library as well as the Xerces 
    C++ library that your linking with is also compile with 
    the same version of g++. If not, then linking errors 
    migth occur. See gcc notes on version compatability
    issues. 
    
1.2 Xerces C++ XML Parser

    Open diameter uses Xerces C++ 2.1.0 and higher. It is 
    recommended that Xerces C++ 2.6.0 and above is used 
    on non-FreeBSD systems. Version 2.1.0 support is 
    maintained because it is the latest version to have 
    FreeBSD support.
 
    Xerces C++ XML Parser's home is:
       http://xml.apache.org/xerces-c

    Acknowledgment:
        This product includes software developed by the
        Apache Software Foundation (http://www.apache.org/).

1.3 ACE library

    Open diameter makes extensive use of the ACE framework
    including threading, communications, logging etc. The
    latest ACE version that has been tested with Open Diameter
    is ACE Release 5.4.x.

    You can get the source code of the ACE library from:
       http://www.cs.wustl.edu/%7Eschmidt/ACE.html

    Acknowledgment:
       The members of the Open Diameter project thank the 
       ACE project for developing the ACE library for 
       providing OS independency and useful design 
       patterns.

1.4 Boost library

    Beginning version 1.0.3, the use bison and flex for parser
    generators haved been obsoleted. It has been replaced by
    the Spirit parser framework contained in the Boost library
    set. This resolves the frequent compile issues that results 
    from incompatible flex and bison version (which was very 
    restrictive in porting to Windows OS). In addition, the Diameter
    message parser has made extensive use of the Boost libraries functor 
    defintions as well as other advanced C++ design patterns such as
    Type2Type template.

    Boost URL is:
       http://www.boost.org

    Compiler Notes:
       Pls. note that there has been compilation issues with regards
       to boost and gcc (especially with gcc version older than 3.0.0). 
       For the latest information in compiler version compatibility 
       pls see the boost compiler/build status available in thier website.

    Acknowledgment:
       The members of the Open Diameter project thank the Boost 
       library maintainers for providing a robust and extensive
       collection of library toolsets.


1.5 OpenSSL library

    It is recommended that you use the latest version of OpenSSL
    Specifically, a version which includes aes in it's crypto
    package. In addition, it is required that the OpenSSL libraries
    has the cipher specifications built into it (i.e. DO NOT use
    no-cipher parameter in building OpenSSL). This is required by 
    EAP libraries. If building OpenSSL, make sure that the shared 
    libraries version is also build. For win32 systems, OpenSSL 
    has extensive build instructions. You will most likely need 
    active perl or other win32 perl packages to build OpenSSL 
    properly on win32 systems.
    
    Acknowledgment:
	This product includes software developed by the OpenSSL
	Project for use in the OpenSSL Toolkit
	(http://www.openssl.org/).

	This product includes cryptographic software written by
        Eric Young (eay@cryptsoft.com).

        This product includes software written by Tim Hudson
        (tjh@cryptsoft.com).
 
1.6 Autoconf/Automake/libtool versions

    It is recommended that you use the latest version of autoconf
    and automake. The configure scripts uses later versions of
    macros calls that might not be present in older versions.
    The following are tested versions of autoconf, automake and
    libtool. These tools are only used if you wish to change
    any Makefiles or build options not configurable by the
    config scripts.

       1. Autoconf - version 2.59
       2. Automake - version 1.8.5
       3. Libtool  - 1.5.6

2. How to compile
-----------------

2.1 Open diameter libraries

    As of version 1.0.7-h, the Open Diameter build will result in 
    nine(10) libraries:

      1. libdiamparser     - Diameter message parser 
      2. libdiameter       - Diameter base protocol 
      3. libeap            - EAP protocol implementation 
      4. libeaparchie      - EAP Archie implementation 
      5. libpana           - PANA protocol implementation 
      6. libdiametereap    - Diameter/EAP library
      7. libdiameternasreq - Diameter/NASREQ library
      8. libdiametermip4   - Diameter/MIP4 library
      9. libodutl          - General support library for 
                             all protocols
 
    Note that libeap-archie is built inside the libeap 
    directory. The Test programs for each library are also
    built. 

2.2 Open diameter applications

    As of version 1.0.7-h, the Open Diameter distribution includes
    two(2) binary applications:

      1. nasd - NAS deamon (Network access deamon) designed to
                be used as access application at the edge of 
                a network. It is used to bridge access protocols
                (PANA, 802.1x ..etc) and backed AAA protocols 
                (Diameter, RADIUS ..) to provide a complete
                access environment. For details, see the README
                file under the applications directory and 
                http://www.opendiameter.org
      2. aaad - AAA deamon. This is a diameter server deamon.
                At the moment, the only application is supports
                is Diameter EAP. This supplements the nasd to 
                allow user access test. For details, see the 
                README file under the applications directory
                and http://www.opendiameter.org.

2.3 Supported platforms

    Open diameter libraries has support for the following OS:

      1. Linux       - tested distrubutions include redhat 
                       and debian. Kernel version restrictions 
                       are dictated by the ACE library.
      2. FreeBSD     - tested versions include 4.8 and 5.0
      3. Win 2000/XP - The open diameter set of libraries
                       are built as DLL's. Export libraries
                       are provided as well.

2.4 Build environment

    In order to build the open diameter set of libraries, there
    are a few environment variables that need to be set. This
    applies to unix systems only.

      a. XERCESCROOT - must be set to the proper Xerces C++ root 
                       directory. See Sec. 1.2 for details.
      b. ACE_ROOT    - must be set to the root directory of the 
                       ACE installation. This is also required 
                       before building ACE. See Sec. 1.3 for
                       details.
      c. BOOST_ROOT  - must be set to the root directory of the 
                       boost installation. See Sec. 1.4 for 
                       details.

   To build opendiameter on unix systems, type "./configure" from 
   the open diameter root directory then type "make". After building, 
   the libraries will be located under thier respective directory.
   Note that as of this writing, only static libraries are built.
   A complete options list for the configure scripts is located in
   the INSTALL doc.

2.5 Win32 Platforms

   As of release 1.0.5, building on win32 platforms requires the
   use of Microsoft .NET 2003 version (VC++ 7.1). A "Solutions"
   directory has been provided which mimics the Open Diameter
   directory structur. At the root of the Solutions directory
   is a .NET solutions object file (OpenDiameter.sln). This 
   references all other VC++ 7.1 project files residing in thier 
   respective sub-directory. With the use of .NET environment, 
   third-party libraries and include paths can now be set as a 
   .NET environment option. This can be accessed under Tools->
   Options->Projects->VC++ Directories. Therefore, the include and 
   library paths in each project file does not need to be adjusted. 
   Further details can be found in the docs directory under 
   msvc-solution-usage.txt.
   
3. Installation 

   The Open Diameter libraries can installed using the exsting
   root configure script. Installation can be done using the steps:

      $ configure --prefix=[prefered directory]
      $ make
      $ make install

   The include files will be placed in $(prefix)/include/opendiameter/*.
   Additional subdirectories under this directory is made for each
   library. For example, libdiameter headers will be placed in
   $(prefix)/include/opendiameter/diameter. Libraries files will
   be installed in $(prefix)/lib. Configuration files will be
   installed in $(prefix)/etc/opendiameter/*.

   Note that the --prefix is optional and if not supplied the default
   prefix is /usr/local.

4. How to use
-------------

4.1 General Diameter Parser Library Notes

   The Diameter parser library is maintained in libdiamparser
   directory. It is a generic AVP based parser that is used
   by all other libraries under Open Diameter. Valid AVP's 
   and commands are defined inside an XML dictionary file
   dictionary.xml and it's corresponding DTD dictionary.dtd.
   
   As of version 1.0.7, the dictionary files are partitioned
   on a per protocol basis using the <dictionary> tags. Each
   <dictionary> tag has a required 'protocol' attribute that
   dictates which protocol the section belongs too. The following
   is a table of currently assigned protocol values:

       a. 0 - Diameter base protocol
       b. 1 - PANA protocol

   Future assignments will be made depending on the protocol 
   implementation if it will use libdiamparser.

   For the diameter base protocol section, there is <base> 
   section which defines base protocol AVP's and commands
   and an <application> section which defines diameter 
   application AVP's and commands. The <application> section
   has an id attribute which defines the diameter application
   id. User applications wishing to add thier own AVP's and 
   commands MUST edit the dictionary file. 

4.2 General Diameter Library Notes

   For libdiameter, the configuration files are in 
   libdiameter/config. As of version 1.0.7, there has
   been many changes and additions to the configuration
   file. Pls. see the sample configuration file
   config/configuration.xml for details.

4.3 Sample programs

   All libraries in Open Diameter maintains a test directory
   which contains sample programs. The sample code shows how
   to use the API's for that library. Since, Open Diameter 
   does not currently provide extensive documentation on usage 
   of every API, the sample code is the best source for usage 
   reference.

4.4 Parser Usage Notes for String Container

   The libdiamparser relies heavily on the STL string class 
   to represent diameter data types. However, there has been 
   usage issues with regards to c_str() and data() methods of 
   the STL string class. This section is an overview of the 
   recommeded usage for these methods. The use of the following 
   examples provide a clear scenario on the issue as it pertains
   to libdiamparser. 

       rdta->dest_string = source_string->data();

   and

      rdata->dest_string = source_string->c_str();

   Both invocation will give the same result only when the data
   contained in source_string is null-terminated but in many 
   cases it is not null-terminated when source_string data is set as a
   result of parseRawToApp() [Both OctetString and UTF8String allows a
   null character to appear in the middle of the data].  When using
   c_str(), a null character is prepended at the end of the data but
   length() value does not change before and after the call to
   c_str(). Hence, the former example will show an unexpected behavior
   if the source_string data is not null-terminated. The use 
   of data() in such scenario is not recommended. 

4.5 Directory changes for 1.0.7

   All header files specific to each library are now maintained
   in each librarie's source and include directory. Each libraries
   API is located in thier respective include directory. The top 
   level include directory contians a set of headers that are used 
   globally by all libraries and applications. This includes the 
   following:

      1. framework.h - Header file for the Open diameter framework
                       architecture. See Open Diameter C++ framework
                       documentation for details.
      2. callback_patterns.h - Generic C++ callback patterns used
                       by some libraries
      3. resultcodes.h - Defines all the diameter base protocol
                       result codes. 
 
  
5. Platform Support Table
-------------------------

   The following is the list of libraries currently distributed 
   with Open Diameter and which platform each library support.
   If a platform is supported, each entry will list all distribution
   types (i.e, source, rpm, deb, etc). Other additional information 
   will be provided in the future.

   Legend:
     A - source, tar.gz, GCC 3.2.2 and above
     B - source, zip, C++ .NET 2003
     C - source, build support for shared library 
     D - source, buidl support for DLL
     E - binary, RPM package
     F - binary, deb package
     G - FreeBSD ports collection

   Libraries Table
                       Linux         FreeBSD        Win32
   -------------------------------------------------------
   libdiameter          A, C          A, C           B, C
   libdiametereap       A, C          A, C           B, C
   libdiameternasreq    A, C          A, C           B, C
   libdiametermip4      A, C          A, C           B, C
   libdiamparser        A, C          A, C           B, C
   libeap               A, C          A, C           B, C
   libeaparchie         A, C          A, C           B, C
   libodutl             A, C          A, C           B, C
   libpana              A, C          A, C           B, C

   Applications Table
                       Linux         FreeBSD        Win32
   -------------------------------------------------------
   none


6. Contact Information
----------------------

   If you have any questions and comments, please send email to 

   diameter-developers@lists.sourceforge.net.

   General information about the mailing list is at:

   http://lists.sourceforge.net/lists/listinfo/diameter-developers.

   The Open Diameter Project home page is at:

   http://sourceforge.net/projects/diameter.

