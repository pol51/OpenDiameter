diff -urN a/openssl-1.0.0m/ssl/s3_clnt.c b/openssl-1.0.0m/ssl/s3_clnt.c
--- a/openssl-1.0.0m/ssl/s3_clnt.c	2014-06-05 02:41:31.000000000 -0700
+++ b/openssl-1.0.0m/ssl/s3_clnt.c	2014-07-23 14:26:50.422717000 -0700
@@ -151,6 +151,7 @@
 #include <stdio.h>
 #include "ssl_locl.h"
 #include "kssl_lcl.h"
+#include "tls1.h"
 #include <openssl/buffer.h>
 #include <openssl/rand.h>
 #include <openssl/objects.h>
@@ -278,19 +279,22 @@
 		case SSL3_ST_CR_SRVR_HELLO_B:
 			ret=ssl3_get_server_hello(s);
 			if (ret <= 0) goto end;
-
-			if (s->hit)
+			/* modified by Bing LI. 
+			  There is no way to decide the type of the next message after 
+			  processing the ServerHello message. 
+		          The decision will be done in the function of ssl3_check_finished.*/
+			/*if (s->hit)
 				{
 				s->state=SSL3_ST_CR_FINISHED_A;
 #ifndef OPENSSL_NO_TLSEXT
 				if (s->tlsext_ticket_expected)
-					{
+					{ */
 					/* receive renewed session ticket */
-					s->state=SSL3_ST_CR_SESSION_TICKET_A;
-					}
-#endif
+					/* s->state=SSL3_ST_CR_SESSION_TICKET_A;
+					} */
+/* #endif
 				}
-			else
+			else */
 				s->state=SSL3_ST_CR_CERT_A;
 			s->init_num=0;
 			break;
@@ -372,6 +376,9 @@
 			else
 				s->state=SSL3_ST_CW_KEY_EXCH_A;
 			s->init_num=0;
+			s->hit = 0;
+			/* added by Bing LI. It means PAC is invalid that the client 
+			 * received ServerHelloDone Message */
 
 			break;
 
@@ -698,6 +705,19 @@
 			}
 #endif
 		*(p++)=0; /* Add the NULL method */
+		/* send client hello extensions if any */
+		if (s->version >= TLS1_VERSION && s->tls_extension)
+		{
+			// set the total extensions length
+			s2n(s->tls_extension->length + 4, p);
+
+			// put the extensions with type and length
+			s2n(s->tls_extension->type, p);
+			s2n(s->tls_extension->length, p);
+			
+			memcpy(p, s->tls_extension->data, s->tls_extension->length);
+			p+=s->tls_extension->length;
+		}
 
 #ifndef OPENSSL_NO_TLSEXT
 		/* TLS extensions*/
@@ -735,7 +755,7 @@
 	STACK_OF(SSL_CIPHER) *sk;
 	const SSL_CIPHER *c;
 	unsigned char *p,*d;
-	int i,al,ok;
+	int i,al,ok,pre_shared;
 	unsigned int j;
 	long n;
 #ifndef OPENSSL_NO_COMP
@@ -804,7 +824,7 @@
 
 #ifndef OPENSSL_NO_TLSEXT
 	/* check if we want to resume the session based on external pre-shared secret */
-	if (s->version >= TLS1_VERSION && s->tls_session_secret_cb)
+	/*if (s->version >= TLS1_VERSION && s->tls_session_secret_cb)
 		{
 		SSL_CIPHER *pref_cipher=NULL;
 		s->session->master_key_length=sizeof(s->session->master_key);
@@ -816,11 +836,29 @@
 			s->session->cipher = pref_cipher ?
 				pref_cipher : ssl_get_cipher_by_char(s, p+j);
 			}
-		}
+		}*/
 #endif /* OPENSSL_NO_TLSEXT */
 
-	if (j != 0 && j == s->session->session_id_length
-	    && memcmp(p,s->session->session_id,j) == 0)
+	/* check if we want to resume the session based on external pre-shared secret */
+	pre_shared = 0;
+	if ((s->version >= TLS1_VERSION) && s->tls_session_secret_cb)
+	{
+		SSL_CIPHER *pref_cipher=NULL;
+		s->session->master_key_length=sizeof(s->session->master_key);
+		if (s->tls_session_secret_cb(s, s->session->master_key, &s->session->master_key_length,
+			NULL, &pref_cipher, s->tls_session_secret_cb_arg))
+		{
+			s->hit = 1;
+			s->session->cipher=pref_cipher ? pref_cipher : ssl_get_cipher_by_char(s,p+j);
+			s->session->session_id_length = j;
+			memcpy(s->session->session_id, p, j);
+			pre_shared = 1;
+		}
+	}
+
+
+	if ((((pre_shared || j) != 0) && (j == s->session->session_id_length))
+	    && (memcmp(p,s->session->session_id,j) == 0))
 	    {
 	    if(s->sid_ctx_length != s->session->sid_ctx_length
 	       || memcmp(s->session->sid_ctx,s->sid_ctx,s->sid_ctx_length))
@@ -3034,7 +3072,7 @@
 	int ok;
 	long n;
 	/* If we have no ticket it cannot be a resumed session. */
-	if (!s->session->tlsext_tick)
+	if ((!s->session->tlsext_tick) && (!s->tls_extension)) //modified by Bing LI. tls_extension is the new variable in the patch for eap-fast 
 		return 1;
 	/* this function is called when we really expect a Certificate
 	 * message, so permit appropriate message length */
diff -urN a/openssl-1.0.0m/ssl/s3_srvr.c b/openssl-1.0.0m/ssl/s3_srvr.c
--- a/openssl-1.0.0m/ssl/s3_srvr.c	2014-06-05 02:41:31.000000000 -0700
+++ b/openssl-1.0.0m/ssl/s3_srvr.c	2014-07-23 14:26:50.308632000 -0700
@@ -1087,6 +1087,37 @@
 			}
 	}
 
+/* Check for TLS client hello extension */
+
+	if (p < (d+n) && s->version >= TLS1_VERSION)
+	{
+		if (s->tls_extension_cb)
+		{
+			TLS_EXTENSION tls_ext;
+			unsigned short ext_total_len;
+			
+			n2s(p, ext_total_len);
+			n2s(p, tls_ext.type);
+			n2s(p, tls_ext.length);
+			// Sanity check TLS extension length
+			if (tls_ext.length > (d+n) - p)
+			{
+				// Cuts the length to packet border
+				tls_ext.length = (d+n) - p;
+			}
+
+			tls_ext.data = p;
+
+			// Returns an alert code or 0
+			al = s->tls_extension_cb(s, &tls_ext, s->tls_extension_cb_arg);
+			if (al != 0)
+			{
+				SSLerr(SSL_F_SSL3_GET_CLIENT_HELLO,SSL_R_PEER_ERROR);
+				goto f_err;
+			}
+		}
+	}
+
 	if (!s->hit && s->version >= TLS1_VERSION && s->tls_session_secret_cb)
 		{
 		SSL_CIPHER *pref_cipher=NULL;
diff -urN a/openssl-1.0.0m/ssl/ssl_err.c b/openssl-1.0.0m/ssl/ssl_err.c
--- a/openssl-1.0.0m/ssl/ssl_err.c	2014-06-05 02:41:31.000000000 -0700
+++ b/openssl-1.0.0m/ssl/ssl_err.c	2014-07-23 14:26:50.735608000 -0700
@@ -277,6 +277,7 @@
 {ERR_FUNC(SSL_F_TLS1_PRF),	"tls1_prf"},
 {ERR_FUNC(SSL_F_TLS1_SETUP_KEY_BLOCK),	"TLS1_SETUP_KEY_BLOCK"},
 {ERR_FUNC(SSL_F_WRITE_PENDING),	"WRITE_PENDING"},
+{ERR_FUNC(SSL_F_SSL_SET_HELLO_EXTENSION), "SSL_set_hello_extension"},
 {0,NULL}
 	};
 
diff -urN a/openssl-1.0.0m/ssl/ssl.h b/openssl-1.0.0m/ssl/ssl.h
--- a/openssl-1.0.0m/ssl/ssl.h	2014-06-05 02:41:31.000000000 -0700
+++ b/openssl-1.0.0m/ssl/ssl.h	2014-07-23 14:26:49.874725000 -0700
@@ -356,6 +356,8 @@
  * in SSL_CTX. */
 typedef struct ssl_st *ssl_crock_st;
 typedef struct tls_session_ticket_ext_st TLS_SESSION_TICKET_EXT;
+typedef struct tls_extension_st TLS_EXTENSION;
+
 
 /* used to hold info on the particular ciphers used */
 typedef struct ssl_cipher_st
@@ -1178,6 +1180,11 @@
 	/* TLS pre-shared secret session resumption */
 	tls_session_secret_cb_fn tls_session_secret_cb;
 	void *tls_session_secret_cb_arg;
+	
+	TLS_EXTENSION *tls_extension;
+	int (*tls_extension_cb)(SSL *s, TLS_EXTENSION *tls_ext, void *arg);
+	//int (*tls_extension_cb)(SSL *s,const unsigned char *data, int len, void *arg);
+	void *tls_extension_cb_arg;
 
 	SSL_CTX * initial_ctx; /* initial ctx, used to store sessions */
 #define session_ctx initial_ctx
@@ -1801,8 +1808,10 @@
 #endif
 
 /* TLS extensions functions */
-int SSL_set_session_ticket_ext(SSL *s, void *ext_data, int ext_len);
+int SSL_set_hello_extension(SSL *s, int ext_type, void *ext_data, int ext_len);
+int SSL_set_hello_extension_cb(SSL *s, int (*cb)(SSL *, TLS_EXTENSION *, void *), void *arg);
 
+int SSL_set_session_ticket_ext(SSL *s, void *ext_data, int ext_len);
 int SSL_set_session_ticket_ext_cb(SSL *s, tls_session_ticket_ext_cb_fn cb,
 				  void *arg);
 
@@ -2025,6 +2034,7 @@
 #define SSL_F_TLS1_PRF					 284
 #define SSL_F_TLS1_SETUP_KEY_BLOCK			 211
 #define SSL_F_WRITE_PENDING				 212
+#define SSL_F_SSL_SET_HELLO_EXTENSION	 213
 
 /* Reason codes. */
 #define SSL_R_APP_DATA_IN_HANDSHAKE			 100
diff -urN a/openssl-1.0.0m/ssl/ssl_sess.c b/openssl-1.0.0m/ssl/ssl_sess.c
--- a/openssl-1.0.0m/ssl/ssl_sess.c	2014-06-05 02:41:31.000000000 -0700
+++ b/openssl-1.0.0m/ssl/ssl_sess.c	2014-07-23 14:26:49.992029000 -0700
@@ -839,7 +839,6 @@
 	return(s->session_timeout);
 	}
 
-#ifndef OPENSSL_NO_TLSEXT
 int SSL_set_session_secret_cb(SSL *s, int (*tls_session_secret_cb)(SSL *s, void *secret, int *secret_len,
 	STACK_OF(SSL_CIPHER) *peer_ciphers, SSL_CIPHER **cipher, void *arg), void *arg)
 	{
@@ -849,6 +848,52 @@
 	return(1);
 	}
 
+int SSL_set_hello_extension(SSL *s, int ext_type, void *ext_data, int ext_len)
+{
+	if(s->version >= TLS1_VERSION)
+	{
+		if(s->tls_extension)
+		{
+			OPENSSL_free(s->tls_extension);
+			s->tls_extension = NULL;
+		}
+
+		if(ext_data)
+		{
+			s->tls_extension = OPENSSL_malloc(sizeof(TLS_EXTENSION) + ext_len);
+			if(!s->tls_extension)
+			{
+				SSLerr(SSL_F_SSL_SET_HELLO_EXTENSION, ERR_R_MALLOC_FAILURE);
+				return 0;
+			}
+
+			s->tls_extension->type = ext_type;
+			s->tls_extension->length = ext_len;
+			s->tls_extension->data = s->tls_extension + 1;
+			memcpy(s->tls_extension->data, ext_data, ext_len);
+		}
+
+		return 1;
+	}
+
+	return 0;
+}
+
+#ifndef OPENSSL_NO_TLSEXT
+
+int SSL_set_hello_extension_cb(SSL *s, int (*cb)(SSL *, TLS_EXTENSION *, void *), void *arg)
+{
+	if(s->version >= TLS1_VERSION)
+	{
+		s->tls_extension_cb = cb;
+		s->tls_extension_cb_arg = arg;
+		
+		return 1;
+	}
+
+	return 0;
+}
+
 int SSL_set_session_ticket_ext_cb(SSL *s, tls_session_ticket_ext_cb_fn cb,
 				  void *arg)
 	{
diff -urN a/openssl-1.0.0m/ssl/tls1.h b/openssl-1.0.0m/ssl/tls1.h
--- a/openssl-1.0.0m/ssl/tls1.h	2014-06-05 02:41:31.000000000 -0700
+++ b/openssl-1.0.0m/ssl/tls1.h	2014-07-23 14:26:48.026306000 -0700
@@ -533,12 +533,20 @@
 #define TLS_MD_MASTER_SECRET_CONST    "\x6d\x61\x73\x74\x65\x72\x20\x73\x65\x63\x72\x65\x74"  /*master secret*/
 #endif
 
+/* TLS extension struct */
+struct tls_extension_st
+{
+	unsigned short type;
+	unsigned short length;
+	void *data;
+};
+
 /* TLS Session Ticket extension struct */
 struct tls_session_ticket_ext_st
-	{
+{
 	unsigned short length;
 	void *data;
-	};
+};
 
 #ifdef  __cplusplus
 }
diff -urN a/openssl-1.0.0m/util/ssleay.num b/openssl-1.0.0m/util/ssleay.num
--- a/openssl-1.0.0m/util/ssleay.num	2014-06-05 02:42:01.000000000 -0700
+++ b/openssl-1.0.0m/util/ssleay.num	2014-07-23 14:26:16.784612000 -0700
@@ -259,3 +259,6 @@
 SSL_set_session_ticket_ext_cb           308	EXIST::FUNCTION:
 SSL_set1_param                          309	EXIST::FUNCTION:
 SSL_CTX_set1_param                      310	EXIST::FUNCTION:
+SSL_set_hello_extension					311	EXIST::FUNCTION:
+SSL_set_hello_extension_cb				312	EXIST::FUNCTION:
+
