#                                               -*- Autoconf -*-A
# Process this file with autoconf to produce a configure script.
# 
# @date June 20, 2014
# @author Ron Brash (ron.brash@gmail.com)
# @copy http://sourceforge.net/projects/diameter/
# @brief OpenDiameter library, option and include checks
# @note Updated from original for additional checks and documentation for
# improved compile time error detection ;)
#
AC_INIT(OpenDiameter, 1.0.7-h, ron.brash@gmail.com)
AM_INIT_AUTOMAKE([subdir-objects])

# M4 Macros
AC_CONFIG_MACRO_DIR([m4])

# Program Defaults
AC_ENABLE_SHARED

# Use of libtool
AC_PROG_LIBTOOL

# Checks for build environment 
AC_CANONICAL_HOST

# Checks for environment variables or folders
# Check for ACE directories or variable (if you installed it somewhere else this may cause trouble)
AC_MSG_CHECKING([existence of ACE_ROOT variable or folder in /usr/include/])
if test -z "$ACE_ROOT"; then 
	if test -d "/usr/include/ace"; then
		CXXFLAGS="$CFLAGS -I/usr/include/ace"
		CPPFLAGS="$CFLAGS -I/usr/include/ace" 
		AC_MSG_RESULT(yes)
	else
		AC_MSG_RESULT(fail)
		AC_MSG_ERROR([ACE_ROOT not defined, you MUST install ACE 5.7.6 or set ACE_ROOT if already installed \
		other versions are known to work, but may have compiling or run-time errors - use are your own \
		risk!]); 
   fi
else
   AC_MSG_RESULT(yes)
fi

# Check for Boost directories or variable (if you installed it somewhere else this may cause trouble)
AC_MSG_CHECKING([existence of BOOST_ROOT variable or folder in /usr/include/])
if test -z "$BOOST_ROOT"; then 
	if test -d "/usr/include/boost"; then 
		CXXFLAGS="$CFLAGS -I/usr/include/boost"
		CPPFLAGS="$CFLAGS -I/usr/include/boost"
		AC_MSG_RESULT(yes)
	else
		AC_MSG_RESULT(fail)
		AC_MSG_ERROR([BOOST_ROOT not defined, you MUST install spirit 1.55.0 or greater or set BOOST_ROOT \
		if already installed]); 
   fi
else
   AC_MSG_RESULT(yes)
fi

# Check for OpenSSL directories (if you installed it somewhere else this may cause trouble)
AC_MSG_CHECKING([existence of openssl folder])
if [ test -d "/usr/include/openssl" ]; then 
	CXXFLAGS="$CFLAGS -I/usr/include/openssl"
	CPPFLAGS="$CFLAGS -I/usr/include/openssl"
	AC_MSG_RESULT(yes)
elif [ test -d "/usr/local/ssl" ]; then
	CXXFLAGS="$CFLAGS -I/usr/local/ssl"
	CPPFLAGS="$CFLAGS -I/usr/local/ssl"
	AC_MSG_RESULT(yes)
else
	AC_MSG_RESULT(fail)
	AC_MSG_ERROR([Unable to find openssl include directory]); 
fi

# Checks for ODBC support
AC_ARG_ENABLE(odbc, AC_HELP_STRING([--enable-odbc], [Compiles Open Diameter Accounting with unixODBC support]))
if test "$enable_odbc" = "yes"; then
   AC_SUBST(L_ODBCFLAGS, ["-DAAA_ODBC_XFORMER"])
fi

# Checks for MPA support
AC_ARG_ENABLE(mpa, AC_HELP_STRING([--enable-mpa], [Compiles with MPA support]))
if test "$enable_mpa" = "yes"; then
   AC_SUBST(L_MPAFLAGS, ["-DPANA_MPA_SUPPORT"])
fi

# Checks for EAP-Archie inclusion 
AC_ARG_ENABLE(eap-archie, AC_HELP_STRING([--enable-eap-archie], [Compiles the EAP-Archie library]))
AM_CONDITIONAL([OPT_EAP_ARCHIE], [test "$enable_eap_archie" = "yes"]) 
if test "$enable_eap_archie" = "yes"; then
	AC_MSG_CHECKING([existence of EAP_ARCHIE_ROOT variable])
	if test -z "$EAP_ARCHIE_ROOT"; then 
	   AC_MSG_RESULT(fail)
	   AC_MSG_ERROR([EAP_ARCHIE_ROOT not defined, you MUST install eap-archie and make sure \
	   EAP_ARCHIE_ROOT points to the source tree]); 
	else
	   AC_MSG_RESULT(yes)
	fi
fi

# Checks for EAP-MD5 support
AC_ARG_ENABLE(eap-md5, AC_HELP_STRING([--enable-eap-md5], [Compiles with EAP MD5 test support]))
if test "$enable_eap_md5" = "yes"; then
   AC_DEFINE(EAPDEFINE)
fi

# Checks whether --with-eap-tls was given.
AC_ARG_WITH(eap-tls, [  --with-eap-tls          compile the EAP-TLS library])
AM_CONDITIONAL(compile_EAPTLS, [test "$with_eap_tls" = "yes"])

# Checks for BOOST_SPIRIT_THREADSAFE
AC_ARG_ENABLE(boost-thread-safe, AC_HELP_STRING([--enable-boost-thread-safe], [Compiles with BOOST_SPIRIT_THREADSAFE]))
if test "$enable_boost_thread_safe" = "yes"; then
	AC_DEFINE(BOOST_SPIRIT_THREADSAFE)
fi

# Checks for programs.
AC_PROG_CC
AC_PROG_CXX
AC_PROG_INSTALL
AC_PROG_LIBTOOL
AM_PROG_CC_C_O

# Checks for libraries.
AC_SEARCH_LIBS([dlopen], [dl dld], [], [
  AC_MSG_ERROR([unable to find the dlopen() function])
  AC_MSG_RESULT(fail)
])

# Does libcrypto exist?
AC_SEARCH_LIBS([MD5],[crypto],AC_MSG_NOTICE([Checking for libcrypto]),[
  AC_MSG_ERROR([libcrypto was not found])
  AC_MSG_RESULT(fail)
])

# Does libssl exist?
AC_SEARCH_LIBS(SSL_CTX_new,ssl,AC_MSG_NOTICE([Checking for libssl]),[
  AC_MSG_ERROR([libssl was not found])
  AC_MSG_RESULT(fail)
])

# Does libACE exist?
PKG_CHECK_MODULES([ACE], [ACE], [have_libACE=yes], [have_libACE=no])
AM_CONDITIONAL([ACE],  [test "$have_libACE" = "yes"])

# Does libACEXML exist?
PKG_CHECK_MODULES([ACEXML], [ACEXML], [have_libACEXML=yes], [have_libACEXML=no])
AM_CONDITIONAL([ACEXML],  [test "$have_libACEXML" = "yes"])

# Does libACEXML_Parser exist?
PKG_CHECK_MODULES([ACEXML_Parser], [ACEXML_Parser], [have_libACEXML_Parser=yes], [have_libACEXML_Parser=no])
AM_CONDITIONAL([ACEXML_Parser],  [test "$have_libACEXML_Parser" = "yes"])

# Does libboost_system exist?
# @todo Boost does not play well with autoconf and macros/m4
AC_MSG_CHECKING([existence of libboost_system.so])
if [ test -f "/usr/lib/libboost_system.so" ]; then 
	AC_MSG_RESULT(yes)
elif [ test -f "/lib/libboost_system.so"  ]; then
	AC_MSG_RESULT(yes)
elif [ test -f "/usr/local/lib/libboost_system.so"  ]; then
	AC_MSG_RESULT(yes)
else
	AC_MSG_RESULT(fail)
	AC_MSG_ERROR([Unable to find libboost_system.so shared library]); 
fi

# Does libboost_system exist?
# @todo Boost does not play well with autoconf and macros/m4
AC_MSG_CHECKING([existence of libboost_thread.so])
if [ test -f "/usr/lib/libboost_thread.so" ]; then 
	AC_MSG_RESULT(yes)
elif [ test -f "/lib/libboost_thread.so"  ]; then
	AC_MSG_RESULT(yes)
elif [ test -f "/usr/local/lib/libboost_thread.so"  ]; then
	AC_MSG_RESULT(yes)
else
	AC_MSG_RESULT(fail)
	AC_MSG_ERROR([Unable to find libboost_thread.so shared library]); 
fi
 
# Checks for standard system headers
AC_CHECK_HEADERS(ifaddrs.h)
AC_CHECK_HEADERS(net/if_dl.h)
AC_CHECK_HEADERS(shadow.h)

# OpenSSL header checks
AC_CHECK_HEADERS(openssl/md5.h)
AC_CHECK_HEADERS(openssl/rand.h)

# Checks for typedefs, structures, and compiler characteristics.
AC_HEADER_STDBOOL
AC_C_INLINE
AC_C_CONST

# Checs for functions
AC_CHECK_FUNCS(getifaddrs)

# Substitutions on a per host architecture basis
AC_SUBST(LIBTOOL_DEPS)
case $host in
  *-*-freebsd*)
     AC_SUBST(L_CPPFLAGS, ["-Wall -I$ACE_ROOT -I$BOOST_ROOT -pthread -fno-strict-aliasing"])
     AC_SUBST(L_CXXFLAGS, ["-Wall -I$ACE_ROOT -I$BOOST_ROOT -pthread -fno-strict-aliasing"])
     AC_SUBST(L_LDFLAGS, ["-L$ACE_ROOT/ace -pthread"])
     AC_SUBST(L_LIBS, ["-ldl -lc_r -lssl -lcrypto -lACE_SSL -lACE -lACEXML -lACEXML_Parser -lboost_system -lboost_thread "])
     AC_SUBST(HOST_OS, [OS_FREEBSD])
  ;;
  *-*-linux*)
     AC_SUBST(L_CPPFLAGS, ["-Wall -I$ACE_ROOT -I$BOOST_ROOT -fno-strict-aliasing"])
     AC_SUBST(L_CXXFLAGS, ["-Wall -I$ACE_ROOT -I$BOOST_ROOT -fno-strict-aliasing"])
     AC_SUBST(L_LDFLAGS, ["-L$ACE_ROOT/lib"])
     AC_SUBST(L_LIBS, [" -ldl -lACE_SSL -lACE -lACEXML_Parser -lACEXML -lpthread -lboost_system -lboost_thread -lssl -lcrypto  $LIBS"])
     LIBS="$LIBS -lssl -lcrypto -lACE_SSL -lACE -lACEXML -lACEXML_Parser -lboost_system -lboost_thread "

     if test "$enable_shared" = "no"; then
        AC_SUBST(L_LIBS, ["-ldl -lssl -lcrypto -lACE_SSL -lACE -lACEXML_Parser -lACEXML -lpthread -lboost_system -lboost_thread  $LIBS"])
     fi
     AC_SUBST(HOST_OS, [OS_LINUX])
  ;;
  *_*-*-linux*)
	# Special case where Unknown linux may be guessed 
     AC_SUBST(L_CPPFLAGS, ["-Wall -I$ACE_ROOT -I$BOOST_ROOT -fno-strict-aliasing"])
     AC_SUBST(L_CXXFLAGS, ["-Wall -I$ACE_ROOT -I$BOOST_ROOT -fno-strict-aliasing"])
     AC_SUBST(L_LDFLAGS, ["-L$ACE_ROOT/lib"])
     #-L/usr/lib/x86_64-linux-gnu/  @note Sometimes there are symbol version issues
     AC_SUBST(L_LIBS, [" -ldl -lACE_SSL -lACE -lACEXML_Parser -lACEXML -lpthread -lboost_system -lboost_thread -lssl -lcrypto  $LIBS"])
     LIBS="$LIBS -lssl -lcrypto -lACE_SSL -lACE -lACEXML -lACEXML_Parser -lboost_system -lboost_thread "

     if test "$enable_shared" = "no"; then
        AC_SUBST(L_LIBS, ["-ldl -lssl -lcrypto -lACE_SSL -lACE -lACEXML_Parser -lACEXML -lpthread -lboost_system -lboost_thread  $LIBS"])
     fi
     AC_SUBST(HOST_OS, [OS_LINUX])
  ;;
  *-*-hpux*)
     L_CPPFLAGS="-Wall -Wno-sign-compare -I$XERCESCROOT/include -I$XERCESCROOT/include/xercesc -I$ACE_ROOT -I$BOOST_ROOT"
     L_LDFLAGS="-L$ACE_ROOT/ace -L$XERCESCROOT/lib"
     L_LIBS=" -lssl -lcrypto -lACE_SSL -lACE -lboost_system -lboost_thread"
     HOST_OS=OS_HPUX
  ;;

  *)
     AC_MSG_ERROR([Unsupported OS]); 
     exit;
esac

# Standard libraries for distribution
# @note if a new library or component is to be added, it must be located
# within the AC_CONFIG_FILES[] list.
AC_CONFIG_FILES([Makefile
                 libodutl/Makefile               
                 libdiameter/Makefile               
                 libdiamparser/Makefile
                 libeap/Makefile
                 libpana/Makefile
                 libdiametereap/Makefile
                 libdiametermip4/Makefile
                 libdiameternasreq/Makefile
                 applications/Makefile
                 applications/nas/Makefile
                 applications/aaa/Makefile
                 applications/pana/Makefile])

# Generate output
AC_OUTPUT
